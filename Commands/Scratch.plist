<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby

class String
  # Gets the line number of character +i+ (0-base index)
  def line_from_index(i)
    slice(0..i).count("\n")
  end
  
  # Gets the index of the beginning of line number +l+ (0-base index)
  def index_from_line(l)
    to_a.slice(0...l).join.length
  end

  def next_line_with_matching_indent(block_beginning_line)
    lines = to_a
    indentation = lines[block_beginning_line].scan(/^(\s*)/).flatten.first
    lines.slice(block_beginning_line + 1, lines.size).each_with_index do |line, index|
      return block_beginning_line + index + 1 if line =~ /^#{indentation}[^\s]/
    end
    raise "Match not found"
  rescue
    return nil
  end

  def insert_before_line(line_number, text)
    replace to_a.insert(line_number, text).join
  end

  def insert_after_line(line_number, text)
    replace to_a.insert(line_number + 1, text).join
  end
end

def snippet_escape(text)
  text.gsub('([$`\\])', '\\\\\1')
end

filtered_text = snippet_escape(STDIN.read)

current_position = filtered_text.index_from_line(ENV['TM_CURRENT_LINE'].to_i - 1) + ENV['TM_COLUMN_NUMBER'].to_i - 1

up_method_line   = filtered_text.line_from_index(filtered_text =~ /def\s+self\.up\W/m)
end_of_up = filtered_text.next_line_with_matching_indent(up_method_line)
down_method_line = filtered_text.line_from_index(filtered_text =~ /def\s+self\.down\W/m)
end_of_down = filtered_text.next_line_with_matching_indent(down_method_line)

up_text   = %Q{rename_column "${1:table}", "${2:column}", "${3:new_name}"$0}
down_text = %Q{rename_column "$1", "$3", "$2"}

filtered_text.insert(current_position, up_text)
filtered_text.insert_before_line(end_of_down, down_text)

print filtered_text</string>
	<key>fallbackInput</key>
	<string>none</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^\</string>
	<key>name</key>
	<string>Scratch</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>uuid</key>
	<string>5F218C03-9F56-4B0C-B0BE-68127BAB8F4E</string>
</dict>
</plist>
